 "Mover Código Invariante ao Loop" (Loop-Invariant Code Motion - LICM)
 
 int main() {
    int n = 1000000; // Número grande de iterações
    long long soma = 0;
    int x = 15;
    int y = 10;
    int z = 0; // Variável modificada no loop

    printf("Código SEM otimização LICM (conceitual):\n");
    // Simula algum tempo de início
    clock_t inicio = clock();

    for (int i = 0; i < n; i++) {
        // Este cálculo (x * y) é INVARIANTE ao loop.
        // x e y não mudam dentro do loop.
        int produto_invariante = x * y;

        // Usa o resultado invariante e algo que varia (i ou z)
        soma += produto_invariante + z;
        z = i; // Modifica z para a próxima iteração (torna 'soma +=' variante)
    }

    // Simula algum tempo de fim
    clock_t fim = clock();
    double tempo_decorrido = (double)(fim - inicio) / CLOCKS_PER_SEC;

    printf("Soma final: %lld\n", soma);
    printf("Tempo aproximado: %f segundos\n", tempo_decorrido);
    // Note que x * y foi calculado 'n' vezes.

    return 0;
}
