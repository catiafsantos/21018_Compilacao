Ótima pergunta! Elas não são exatamente a mesma coisa, mas estão relacionadas e podem interagir. Vamos distinguir os conceitos:

Tabela de Símbolos (Symbol Table):

Propósito Principal: É uma estrutura de dados fundamental usada pelo compilador para armazenar informações sobre todos os identificadores (nomes de variáveis, funções, constantes nomeadas, tipos, labels, etc.) que aparecem no código fonte.
Conteúdo Típico para um Símbolo:
Nome do identificador.
Tipo de dados (inteiro, real, string, tipo de função, etc.).
Escopo (onde o identificador é válido).
Endereço de memória ou offset (para variáveis e código de função).
Para constantes nomeadas (ex: const int MAX_VALOR = 100; em C, ou final static String MSG = "Olá"; em Java), a tabela de símbolos guardaria o nome (MAX_VALOR, MSG), o tipo, o facto de ser uma constante, e o seu valor constante (100, "Olá").
Utilização: Usada em quase todas as fases da compilação: análise léxica (parcialmente), análise sintática, análise semântica (verificação de tipos, escopos), otimização e geração de código.
Natureza: É construída à medida que o código fonte é processado e é consultada e atualizada durante a compilação.
"Tabela de Constantes" (Pode ter alguns significados):

a) Pool de Literais (Literal Pool) ou Secção de Dados Constantes:

Propósito: Quando o compilador encontra literais no código (ex: o número 123, a string "exemplo", o real 3.14), esses valores precisam ser armazenados na memória do programa executável.
Muitas vezes, o compilador agrupa esses literais numa área de memória específica, frequentemente chamada de "pool de literais" ou numa secção de dados de apenas leitura.
O objetivo é evitar duplicação (especialmente para strings ou valores grandes) e permitir que o código gerado referencie esses literais através de um endereço ou índice nesse pool.
Relação com Tabela de Símbolos: Se você tem uma constante nomeada como final static String MENSAGEM = "Bem-vindo";, a Tabela de Símbolos terá uma entrada para MENSAGEM, e o valor associado ("Bem-vindo") pode, por sua vez, residir ou ser referenciado no pool de literais de strings.
Natureza: É mais uma estrutura de dados usada para organizar os dados do programa final e para a geração de código.
b) Mapa de Variáveis com Valores Constantes (Durante a Otimização):

Propósito: Durante otimizações como a "dobragem de constantes" e "propagação de constantes" (como o constant_map no nosso exemplo Python), o compilador mantém uma estrutura de dados temporária. Esta estrutura rastreia quais variáveis (que são símbolos listados na tabela de símbolos principal) têm um valor constante conhecido num determinado ponto da análise de otimização.
Conteúdo: Mapeia um identificador de variável (ou uma referência à sua entrada na tabela de símbolos) ao seu valor constante atualmente conhecido.
Natureza: É uma estrutura dinâmica e temporária, usada especificamente pela fase de otimização. O seu conteúdo muda à medida que a otimização progride (uma variável pode tornar-se constante, ou deixar de ser constante se for reatribuída com um valor não constante). Esta não é a tabela de símbolos principal.
Resumindo a Diferença e Relação:

A Tabela de Símbolos é a base de dados central sobre todos os nomes que o programador usa. Ela dirá se um símbolo é uma constante nomeada e qual o seu valor definido no código.
Um Pool de Literais é onde os valores literais brutos (números, strings) são armazenados no programa compilado.
O mapa dinâmico para otimizações (como o constant_map) rastreia o estado "constante" das variáveis comuns durante a execução do próprio otimizador. Uma variável int x; não é uma constante nomeada na Tabela de Símbolos, mas durante a otimização, após x = 5;, o constant_map pode registar que x vale 5 naquele ponto, permitindo dobrar y = x + 2; para y = 7;.
Portanto, não são a mesma coisa, mas trabalham em conjunto:

A tabela de símbolos identifica as variáveis e as constantes nomeadas.
O pool de literais armazena os valores literais.
O mapa de otimização usa informações da tabela de símbolos (para saber sobre as variáveis) e sobre os literais para descobrir e propagar valores constantes através do código, modificando as quádruplas.