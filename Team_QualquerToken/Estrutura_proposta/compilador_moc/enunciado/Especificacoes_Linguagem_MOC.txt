Lista das Especificações da Linguagem MOC

1. Comentários - Delimitadores: /* (início) e */ (fim).

2. Estrutura do Programa
2.1. Protótipos de funções: Devem ser declarados antes de qualquer função ou variável.
2.2. Função main(): Ponto de entrada obrigatório.

3. Blocos de Código - Delimitados por {}, mesmo para blocos com uma única instrução

4. Instruções e Operadores
4.1. Terminação: Todas as instruções terminam com ;.
4.2. Operadores:
4.2.1. Aritméticos: +, -, *, /, %.
4.2.2. Relacionais: ==, !=, >, <, >=, <=.
4.2.3. Lógicos: && (E), || (OU), ! (NÃO).
4.2.4. Atribuição: =.
4.3. Condições: Formato restrito a Expr ou Expr OpCond Expr (e.g., x > 5 && y != 0).

5. Estruturas de Controle
5.1. Condicionais:
5.1.1. if (condicao){…} ou if(condicao){…}else{…}
5.1.2. switch/case.
5.2. Loops:
5.2.1. for
5.2.2. while.

6. Declaração de Funções
6.1. Formato: tipo_retorno nome(parâmetros) { ... }.
6.2. Tipos de retorno: int, double, void, ou ausente (void implícito).

7. Tipos de Dados
7.1. Básicos: int (inteiros), double (ponto flutuante).
7.2. Vetores: Arrays de int ou double (e.g., int v[] = {1, 2, 3};).
7.3. Strings: Vetores de int terminados em 0 (ASCII).

8. Variáveis
8.1. Declaração:
8.1.1. Sem inicialização: Valor padrão 0.
8.1.2. Com inicialização: Usando expressões aritméticas (e.g., int c = 2 * b;).
8.1.3. Vetores: Tamanho automático se inicializados (e.g., int v[] = {1, 2};).
8.2. Âmbito: Variáveis devem ser declaradas antes do uso.

9. Entrada/Saída
9.1. Entrada:
9.1.1. read(): Lê int ou double.
9.1.2. readc(): Lê caracter (retorna valor ASCII).
9.1.3. reads(): Lê string para vetor de int (termina em 0).

9.2. Saída:
9.2.1. write(x): Imprime valor de variável.
9.2.2. writec(x): Imprime caracter (ASCII).
9.2.3. writev(vetor): Imprime vetor no formato {1, 2, 0}.
9.2.4. writes("texto"): Imprime string (com \n ao final).

10. Conversão de Tipos
10.1. Implícita: int → double em operações mistas.
10.2. Explícita: Usar (int) ou (double) (e.g., (int) 3.14 → 3).

11. Regras Adicionais
11.1. Strings Literais: Usadas diretamente no writes("Olá").
11.2. Vetores como Strings: int s[] = reads(); armazena códigos ASCII + 0.
11.3. Erros: Uso de variáveis não declaradas é inválido.
