âœ… Melhorias SemÃ¢nticas Ordenadas por Facilidade de ImplementaÃ§Ã£o
ğŸŸ¢ Mais FÃ¡ceis
VerificaÃ§Ã£o da existÃªncia de funÃ§Ãµes chamadas
â†’ Validar em visitChamadaGenerica se a funÃ§Ã£o foi declarada.
Basta consultar self.funcoes_declaradas.

VerificaÃ§Ã£o da aridade (nÃºmero de argumentos) nas chamadas de funÃ§Ã£o
â†’ Contar argumentos passados e comparar com os declarados.
Exige manter uma tabela de funÃ§Ãµes com nÃºmero de parÃ¢metros.

VerificaÃ§Ã£o de variÃ¡veis jÃ¡ declaradas no mesmo contexto
â†’ JÃ¡ tens isto implementado, mas pode ser reforÃ§ado com mensagens detalhadas.

VerificaÃ§Ã£o de Ã­ndice de vetor ser do tipo inteiro
â†’ Verificar tipo da expressÃ£o de Ã­ndice em visitAcessoVetor.
Necessita sÃ³ de um sistema mÃ­nimo de inferÃªncia de tipos.

VerificaÃ§Ã£o de return na funÃ§Ã£o principal (main)
â†’ Proibir retorno de valor se main for void.

ğŸŸ¡ IntermÃ©dias
VerificaÃ§Ã£o de tipos em atribuiÃ§Ãµes
â†’ Ex: impedir int x = 3.14; sem cast.
Requer rastrear tipo de cada variÃ¡vel e expressÃ£o.

VerificaÃ§Ã£o de tipos em expressÃµes aritmÃ©ticas e lÃ³gicas
â†’ Ex: impedir int + string ou double && int.
Requer Ã¡rvore de tipos para operadores.

VerificaÃ§Ã£o de tipo de retorno em funÃ§Ãµes nÃ£o-void
â†’ Comparar tipo declarado da funÃ§Ã£o com o da return.
Requer armazenar tipo de retorno da funÃ§Ã£o atual durante visitFuncao.

VerificaÃ§Ã£o de uso de funÃ§Ãµes built-in com tipos adequados
â†’ Ex: writes("msg") vs writes(3) â†’ erro.
SÃ³ precisa de verificar argumento com getText().

Avisos sobre variÃ¡veis nÃ£o inicializadas
â†’ Emitir warning se variÃ¡vel for usada sem atribuiÃ§Ã£o anterior.
Pode ser simplificado para casos Ã³bvios (sem analisar todos os caminhos).

ğŸ”´ Mais DifÃ­ceis
InferÃªncia de tipo de expressÃµes
â†’ A cada visit de operaÃ§Ã£o (+, -, *, etc.), retornar tipo.
Implica estrutura de tipos e coerÃ§Ãµes (ex: int + double â†’ double).

VerificaÃ§Ã£o de tipos nos argumentos de funÃ§Ã£o
â†’ Ex: f(int) ser chamado com f(double) â†’ erro ou coerÃ§Ã£o.
Implica guardar assinatura de cada funÃ§Ã£o.

VerificaÃ§Ã£o de inicializaÃ§Ã£o de vetores (blocoArray) com tipos vÃ¡lidos
â†’ Validar se os valores {1,2,3} sÃ£o coerentes com o tipo do vetor.
Requer saber o tipo base do vetor.

VerificaÃ§Ã£o de caminhos de execuÃ§Ã£o com return em funÃ§Ãµes nÃ£o-void
â†’ Ex: garantir que todos os ramos de uma funÃ§Ã£o retornam algo.
Implica anÃ¡lise de fluxo de controlo.

DeteÃ§Ã£o de cÃ³digo inalcanÃ§Ã¡vel
â†’ Ex: instruÃ§Ãµes apÃ³s return ou goto.
Exige rastreamento de fluxo de execuÃ§Ã£o.

AnÃ¡lise de recursÃ£o (detetar ausÃªncia de caso base)
â†’ Muito dependente do objetivo â€” pode ser arbitrÃ¡ria.
Exige anÃ¡lise semÃ¢ntica profunda e heurÃ­sticas.
